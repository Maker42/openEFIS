#
# Raw Sensor Feeds
#
accelerometers:
  output_values:
      - timestamp
      - a_x
      - a_y
      - a_z
  format: dfff
  pubs:
  - {addr: 192.168.0.6, protocol: udp, function: RawAccelerometers}
  subs:
  - {addr: localhost, protocol: udp, function: Yaw}
  - {addr: localhost, protocol: udp, function: PitchEstimate}
  - {addr: localhost, protocol: udp, function: GroundRoll}

rotationsensors:
  # output in degrees per second
  output_values:
      - timestamp
      - r_x
      - r_y
      - r_z
  format: dfff
  pubs:
  - {addr: 192.168.0.6, protocol: udp, function: RawRotationSensors}
  subs:
  - {addr: localhost, protocol: udp, function: Pitch}
  - {addr: localhost, protocol: udp, function: Roll}
  - {addr: localhost, protocol: udp, function: RollRate}
  - {addr: localhost, protocol: udp, function: PitchRate}

magneticsensors:
  output_values:
      - timestamp
      - m_x
      - m_y
      - m_z
  format: dfff
  pubs:
  - {addr: 192.168.0.6, protocol: udp, function: RawMagneticSensors}
  subs:
  - {addr: localhost, protocol: udp, function: HeadingComputed}

pressuresensors:
  output_values:
      - timestamp
      - static_pressure     # In Kilo Pascals
  format: df
  pubs:
  - {addr: 192.168.0.6, protocol: udp, function: RawPressureSensors}
  subs:
  - {addr: localhost, protocol: udp, function: PressureFactors}
  - {addr: localhost, protocol: udp, function: AltitudeComputed}

pitotsensor:
  output_values:
      - timestamp
      - pitot
  format: df
  pubs:
  - {addr: 192.168.0.6, protocol: udp, function: RawPitotSensor}
  subs:
  - {addr: localhost, protocol: udp, function: AirspeedComputed}


temperaturesensors:
  output_values:
      - temperature     # In Celcius
  format: f
  pubs:
  - {addr: 192.168.0.6, protocol: udp, function: RawTemperatureSensors}
  subs:
  - {addr: localhost, protocol: udp, function: PressureFactors}
  - {addr: localhost, protocol: udp, function: AltitudeComputed}

gpsfeed:
  output_values:
      - gps_utc
      - gps_lat
      - gps_lng
      - gps_altitude
      - gps_ground_speed
      - gps_ground_track
      - gps_signal_quality
  format: ddddddi
  pubs:
  - {addr: 192.168.0.6, protocol: udp, function: GPSFeed}
  subs:
  - {addr: localhost, protocol: udp, function: TrackRate}
  - {addr: localhost, protocol: udp, function: ClimbRateEstimate}
  - {addr: localhost, protocol: udp, function: Altitude}
  - {addr: localhost, protocol: udp, function: GroundVector}
  - {addr: localhost, protocol: udp, function: HeadingTasEstimate}

systemcommand:
    # For things like:
    # "fmode": flight mode (based on indicated airspeed),
    #       args:
    #           mode: which is one of: ground | airborn
    #           vertical: True | False
    # "0attitude": 0 out detected pitch and roll
    # "0airspeed": 0 out airspeed indication
    # "baroinhg": Set the barometer. args: baro in inches of mercury
    # "barompa": Set the barometer. args: baro in mega pascals
    # "atis": Pilot supplied wind vector
    #       args:
    #           wind_speed: (float) in knots
    #           wind_direction: (float) in degrees magnetic
    # "windsalft": Winds aloft report
    # args:
    #  wa_lat
    #  wa_lng
    #  wa_altitude
    #  wa_time
    #  wa_heading
    #  wa_speed
  output_values:
      - command
      - args
  format: 10s40s
  pubs:
  - {addr: localhost, protocol: udp, function: SystemCommand}
  subs:
  - {addr: localhost, protocol: udp, function: PressureFactors} # for baro
  - {addr: localhost, protocol: udp, function: Heading}     # for fmode
  - {addr: localhost, protocol: udp, function: Pitch}       # for fmode
  - {addr: localhost, protocol: udp, function: Roll}        # for fmode
  - {addr: localhost, protocol: udp, function: RollRate}    # for fmode
  - {addr: localhost, protocol: udp, function: GroundRoll}  # for 0att
  - {addr: localhost, protocol: udp, function: PitchEstimate}  # for 0att
  - {addr: localhost, protocol: udp, function: Yaw}         # for 0att
  - {addr: localhost, protocol: udp, function: AirspeedComputed} # for 0airsp
  - {addr: localhost, protocol: udp, function: WindEstimate}    # for ATIS

admincommand:
    # For things like:
    # "airspeed": Record a known airspeed for calibration
    #       args: airspeed
    # "heading": Record a known heading for calibration
    #       args: heading (magnetic)
  output_values:
      - command
      - args
  format: 10s40s
  pubs:
  - {addr: localhost, protocol: udp, function: AdminCommand}
  subs:
  - {addr: localhost, protocol: udp, function: AirspeedComputed}
  - {addr: localhost, protocol: udp, function: HeadingComputed}
  - {addr: localhost, protocol: udp, function: Pitch}
  - {addr: localhost, protocol: udp, function: Roll}

#
# Interim computations
#

MagneticDeclination:
    output_values:
        - magnetic_declination
    format: f
    pubs:
      - {protocol: internal, function: MagneticDeclination}
    subs:
      - {protocol: internal, function: WindEstimate}
      - {protocol: internal, function: HeadingTasEstimate}
      - {protocol: internal, function: GroundVector}

PitchEstimate:
    output_values:
        - timestamp
        - pitch_estimate
    format: f
    pubs:
      - {protocol: internal, function: PitchEstimate}
    subs:
      - {protocol: internal, function: Pitch}

GroundRoll:
    output_values:
        - timestamp
        - ground_roll
    format: f
    pubs:
      - {protocol: internal, function: GroundRoll}
    subs:
      - {protocol: internal, function: Roll}

HeadingComputed:
    output_values:
        - timestamp
        - heading_computed
    format: df
    pubs:
      - {protocol: internal, function: HeadingComputed}
    subs:
      - {protocol: internal, function: Heading}
      - {protocol: internal, function: TurnRateComputed}

TurnRateComputed:
    output_values:
        - timestamp
        - turn_rate_computed
    format: df
    pubs:
      - {protocol: internal, function: TurnRateComputed}
    subs:
      - {protocol: internal, function: TurnRate}
      - {protocol: internal, function: RollEstimate}

RollEstimate:
    output_values:
        - timestamp
        - roll_estimate
    format: df
    pubs:
      - {protocol: internal, function: RollEstimate}
    subs:
      - {protocol: internal, function: Roll}
      - {protocol: internal, function: RollRateEstimate}

RollRateEstimate:
    output_values:
        - timestamp
        - roll_rate_estimate
    format: df
    pubs:
      - {protocol: internal, function: RollRateEstimate}
    subs:
      - {protocol: internal, function: RollRate}

HeadingTasEstimate:
    output_values:
        - estimated_heading_true
        - estimated_tas
    format: ff
    pubs:
      - {protocol: internal, function: HeadingTasEstimate}
    subs:
      - {protocol: internal, function: Heading}
      - {protocol: internal, function: AirspeedEstimate}
      - {protocol: internal, function: RollEstimate}

AirspeedComputed:
    output_values:
        - timestamp
        - airspeed_computed
    format: di
    pubs:
      - {protocol: internal, function: AirspeedComputed}
    subs:
      - {protocol: internal, function: Airspeed}
      - {protocol: internal, function: RollEstimate}

AltitudeComputed:
    output_values:
        - timestamp
        - altitude_computed
    format: df
    pubs:
      - {protocol: internal, function: AltitudeComputed}
    subs:
      - {protocol: internal, function: Altitude}
      - {protocol: internal, function: ClimbRate}

AirspeedEstimate:
    output_values:
        - airspeed_estimate
    format: f
    pubs:
      - {protocol: internal, function: AirspeedEstimate}
    subs:
      - {protocol: internal, function: Airspeed}

TrackRate:
    output_values:
        - track_rate
    format: f
    pubs:
      - {protocol: internal, function: TrackRate}
    subs:
      - {protocol: internal, function: TurnRate}

ClimbRateEstimate:
    output_values:
        - climb_rate_estimate
    format: f
    pubs:
      - {protocol: internal, function: ClimbRateEstimate}
    subs:
      - {protocol: internal, function: ClimbRate}

WindEstimate:
    output_values:
        - wind_heading
        - wind_speed
    format: ff
    pubs:
      - {protocol: internal, function: WindEstimate}
    subs:
      - {protocol: internal, function: HeadingTasEstimate}
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}

PressureFactors:
    output_values:
        - sea_level_pressure
        - cas2tas
    format: ff
    pubs:
      - {protocol: internal, function: PressureFactors}
    subs:
      - {protocol: internal, function: AirspeedEstimate}
      - {protocol: internal, function: WindEstimate}
      - {protocol: internal, function: AltitudeComputed}
      - {protocol: internal, function: RollEstimate}
      - {protocol: internal, function: Airspeed}


#
# Best guess computations
#

Yaw:
    output_values:
        - timestamp
        - yaw
        - yaw_confidence
    format: dff
    pubs:
      - {addr: localhost, protocol: udp, function: Yaw}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}

Pitch:
    output_values:
        - timestamp
        - pitch
        - pitch_confidence
    format: dff
    pubs:
      - {addr: localhost, protocol: udp, function: Pitch}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}
      - {protocol: internal, function: HeadingComputed}


Roll:
    output_values:
        - timestamp
        - roll
        - roll_confidence
    format: dff
    pubs:
      - {addr: localhost, protocol: udp, function: Roll}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}
      - {protocol: internal, function: HeadingComputed}
      - {protocol: internal, function: Pitch}
      - {protocol: internal, function: PitchEstimate}

Heading:
    output_values:
        - timestamp
        - heading
        - heading_confidence
    format: dff
    pubs:
      - {addr: localhost, protocol: udp, function: Heading}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}
      - {protocol: internal, function: WindEstimate}

TurnRate:
    output_values:
        - timestamp
        - turn_rate
        - turn_rate_confidence
    format: dff
    pubs:
      - {addr: localhost, protocol: udp, function: TurnRate}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}

RollRate:
    output_values:
        - timestamp
        - roll_rate
        - roll_rate_confidence
    format: dff
    pubs:
      - {addr: localhost, protocol: udp, function: RollRate}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}

Airspeed:
    output_values:
        - timestamp
        - airspeed_is_estimated
        - airspeed
        - tas
        - airspeed_confidence
    format: difff
    pubs:
      - {addr: localhost, protocol: udp, function: Airspeed}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}
      - {protocol: internal, function: WindEstimate}

ClimbRate:
    output_values:
        - timestamp
        - climb_rate
        - climb_rate_confidence
    format: dff
    pubs:
      - {addr: localhost, protocol: udp, function: ClimbRate}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}

Altitude:
    output_values:
        - timestamp
        - altitude
        - altitude_confidence
    format: dff
    pubs:
      - {addr: localhost, protocol: udp, function: Altitude}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}

GroundVector:
    output_values:
        - gps_utc
        - gps_lat
        - gps_lng
        - gps_ground_speed
        - gps_ground_track
        - ground_vector_confidence
        - magnetic_declination
    format: dddddff
    pubs:
      - {addr: localhost, protocol: udp, function: GroundVector}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}
      - {protocol: internal, function: WindEstimate}

PitchRate:
    output_values:
        - timestamp
        - pitch_rate
        - pitch_rate_confidence
    format: dff
    pubs:
      - {addr: localhost, protocol: udp, function: PitchRate}
    subs:
      - {addr: localhost, protocol: udp, function: RAISDiscriminator}

Control:
    output_values:
        - channel
        - value
    format: ii
    pubs:
      - {addr: localhost, protocol: udp, function: Control}
    subs:
      - {addr: 192.168.0.8, protocol: udp, function: ControlSlave}

